@startuml
' declate title
title 10.6. Thirdparty Notification Flow
autonumber

' declare actors
collections "Notification-Topic" as topicNotify
collections "Notification-Thirdparty-Transfer" as 3pTopicTransfer
control "Central Event Processor" as CEP
control "thirdpartyObservable" as SUB
' control "Action Agent" as AA
database "CEP Store" as DB

box "Central Services" #LightYellow
participant topicNotify
participant 3pTopicTransfer
end box
box "Central Event Processing Service" #LightGreen
participant CEP
participant SUB
participant DB
end box

' start flow
Group Subscription Flow
    note over CEP
        The Subscription Flow listens for `subscription` events on the notifications topic, and saves them to the database
        such an event could be emitted during the `POST /authorizations` step, provided the 
        transferId is specified by the PISP ahead of time.
    end note

    rnote over topicNotify #LightGray
        **Example Event**
        {   
            metadata: {
                event: {
                    type: "notification",
                    action: "subscription", 
                    id: '1111-2222-3333',   //transferId to look for 
                    participantId: 'pispA', //id of the pisp to send callback to
                    ...
                }
                ...
            }
            ...
        }
    end note
    activate topicNotify
    topicNotify -> CEP: ""consume(event)""
    deactivate topicNotify

    activate CEP
    CEP -> SUB: ""handle(event)""
    activate SUB
    SUB -> DB: Create the subscription in the database\n""document.create({""\n""  transferId: '1111-2222-3333',""\n""  participantId: 'pispA'""\n""})""
    activate DB
    DB --> SUB: ""Promise.resolve(document)""
    SUB --> CEP: ""Promise.resolve()""
    deactivate DB
    deactivate SUB
    deactivate CEP
end

Group Callback Flow
    note over CEP
        The Callback Flow listens for `commit` events on the notifications topic. It then filters
        events based on their subscription: if there is a subscription in the database, then it
        forwards the message over the `notification-thirdparty-transfer` topic, and removes the
        subscription from the database.
    end note

    note over topicNotify #LightGray
        **Example Event**
        { 
            metadata: {
                correlationId: '1111-2222-3333',   //transferId to look for 
                event: {
                    type: "notification",
                    action: "commit", 
                   ...
                }
                ...
            }
            ...
        }
    end note
    activate topicNotify
    topicNotify -> CEP: ""consume(event)""
    deactivate topicNotify

    activate CEP
    CEP -> SUB: ""handle(event)""
    activate SUB
    SUB -> DB: Lookup in the database to see if we have a subscription\n""document.findOne({""\n""  transferId: '1111-2222-3333',""\n""})""
    activate DB
    DB --> SUB: ""Promise.resolve(document | null)""
    deactivate DB
    alt **No Suscription** exists
        SUB --> CEP: Do nothing\n""Promise.resolve()""   
    else  **Found Suscription**
        SUB -> 3pTopicTransfer: Publish to ""notification-thirdparty-transfer"" topic\n""publish(event)""
        SUB -> DB: Delete the subscription\n""document.delete({""\n""  transferId: '1111-2222-3333',""\n""})""
        activate DB
        DB --> SUB: ""Promise.resolve()""
        deactivate DB
        SUB --> CEP: ""Promise.resolve()""
    end

    deactivate SUB
    deactivate CEP

end

    ' CEP -> AA: Action event

'     alt **Action Object** exist
'         AA -> DB: Request **Event Object**  details
'         activate DB
'         deactivate DB
'         hnote over DB #LightYellow
'             event
'         end hnote
'         note right of AA #LightGrey
'             **Event Object** details;
'                 Action details,
'                 Hub notification details,
'                 DFSP notification details.
'         end note
'         AA -> AA: Prepare notification details
'         AA -> DB: Request **Action Object** by same **Event Object** details
'         activate DB
'         deactivate DB
'         hnote over DB #LightYellow
'             action
'         end hnote

'         alt No previous **Action Object** with same event detail
'             AA -> DB: Store **Action Object**
'             activate DB
'             hnote over DB #LightYellow
'                 action
'             end hnote
'             AA <-- DB: Return result **actionId**
'             deactivate DB
'             AA -> AA: Schedule reset repetition for **actionId** as per rules
'             note left of AA #yellow
'                 {from: "SYSTEM"}
'             end note
'             topicNotify <- AA: Update topic with notification
'             activate topicNotify
'             deactivate topicNotify
'         else Previous **Action Object** with same event detail

'             alt Repetition and notification interval allowed
'                 AA -> AA: Increment repetition counter
'                 AA -> DB: Update **Action Object**
'                 activate DB
'                 hnote over DB #LightYellow
'                     action
'                 end hnote
'                 deactivate DB
'             else Repetition and notification interval not allowed
'             end
'             note left of AA #yellow
'                 {from: "SYSTEM"}
'             end note
'             topicNotify <- AA: Update topic with notification
'             activate topicNotify
'             deactivate topicNotify
'         end
'     else No **Action Object** exist
'     deactivate AA
'     end
' end
'     deactivate CEP
@enduml
